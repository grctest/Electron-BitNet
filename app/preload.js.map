{"version":3,"file":"preload.js","mappings":"mBAAA,MAAM,EAA+BA,QAAQ,YCE7C,EAAAC,cAAcC,kBAAkB,WAAY,CAC1CC,QAASC,MAAOC,GAAW,EAAAC,YAAYC,KAAK,UAAWF,GAEvDG,aAAeC,IACb,EAAAH,YAAYI,GAAG,cAAc,CAACC,EAAOC,KACnCH,EAAKG,EAAK,GACV,EAEJC,UAAYJ,IACV,EAAAH,YAAYI,GAAG,WAAYC,IACzBF,GAAM,GACN,EAEJK,aAAeL,IACb,EAAAH,YAAYI,GAAG,cAAeC,IAC5BF,GAAM,GACN,EAEJM,aAAcX,MAAOY,GAAS,EAAAV,YAAYC,KAAK,eAAgBS,GAC/DC,cAAeb,MAAOY,GAAS,EAAAV,YAAYC,KAAK,gBAAiBS,I","sources":["webpack://electron-bitnet/external node-commonjs \"electron\"","webpack://electron-bitnet/./src/preload.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { ipcRenderer, contextBridge } from \"electron\";\r\n\r\ncontextBridge.exposeInMainWorld(\"electron\", {\r\n  openURL: async (target) => ipcRenderer.send(\"openURL\", target),\r\n  // on aiResponse\r\n  onAiResponse: (func) => {\r\n    ipcRenderer.on(\"aiResponse\", (event, data) => {\r\n      func(data);\r\n    });\r\n  },\r\n  onAiError: (func) => {\r\n    ipcRenderer.on(\"aiError\", (event) => {\r\n      func();\r\n    });\r\n  },\r\n  onAiComplete: (func) => {\r\n    ipcRenderer.on(\"aiComplete\", (event) => {\r\n      func();\r\n    });\r\n  },\r\n  runInference: async (args) => ipcRenderer.send(\"runInference\", args),\r\n  stopInference: async (args) => ipcRenderer.send(\"stopInference\", args)\r\n});\r\n"],"names":["require","contextBridge","exposeInMainWorld","openURL","async","target","ipcRenderer","send","onAiResponse","func","on","event","data","onAiError","onAiComplete","runInference","args","stopInference"],"sourceRoot":""}
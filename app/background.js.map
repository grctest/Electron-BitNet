{"version":3,"file":"background.js","mappings":"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","sources":["webpack://electron-bitnet/webpack/bootstrap","webpack://electron-bitnet/webpack/runtime/compat get default export","webpack://electron-bitnet/webpack/runtime/define property getters","webpack://electron-bitnet/webpack/runtime/hasOwnProperty shorthand","webpack://electron-bitnet/external node-commonjs \"child_process\"","webpack://electron-bitnet/external node-commonjs \"path\"","webpack://electron-bitnet/external node-commonjs \"os\"","webpack://electron-bitnet/external node-commonjs \"process\"","webpack://electron-bitnet/external node-commonjs \"fs\"","webpack://electron-bitnet/external node-commonjs \"url\"","webpack://electron-bitnet/external commonjs \"express\"","webpack://electron-bitnet/external commonjs \"electron\"","webpack://electron-bitnet/./src/background.js","webpack://electron-bitnet/./src/lib/applicationMenu.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"child_process\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"os\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"process\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"url\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { spawn } from 'child_process';\r\nimport path from 'path';\r\nimport os from 'os';\r\nimport process from 'process';\r\nimport fs from 'fs';\r\nimport url from \"url\";\r\nimport express from \"express\";\r\n\r\nimport { app, BrowserWindow, Menu, Tray, ipcMain, screen, shell } from \"electron\";\r\n\r\nimport { initApplicationMenu } from \"./lib/applicationMenu.js\";\r\n\r\nlet mainWindow = null;\r\nlet tray = null;\r\nlet inferenceProcess = null;\r\n\r\nfunction runInference(args) {\r\n  let mainPath = path.join('bin', 'Release', 'llama-cli.exe');\r\n\r\n  if (!fs.existsSync(mainPath)) {\r\n    mainPath = path.join('bin', 'llama-cli');\r\n  }\r\n\r\n  const command = [\r\n    `\"${mainPath}\"`,\r\n    '-m', path.join('models', args.model),\r\n    '-n', args.n_predict,\r\n    '-t', args.threads,\r\n    '-p', `\"${args.prompt}\"`,\r\n    '-ngl', '0',\r\n    '-c', args.ctx_size,\r\n    '--temp', args.temperature,\r\n    '-b', '1'\r\n  ];\r\n\r\n  inferenceProcess = spawn(command[0], command.slice(1), { shell: true });\r\n\r\n  inferenceProcess.stdout.on('data', (data) => {\r\n    const chars = data.toString();\r\n    mainWindow.webContents.send('aiResponse', chars);\r\n  });\r\n\r\n  inferenceProcess.on('close', (code) => {\r\n    mainWindow.webContents.send('aiComplete');\r\n    inferenceProcess = null;\r\n  });\r\n}\r\n\r\nfunction signalHandler() {\r\n  if (inferenceProcess) {\r\n    console.log('Terminating inference process...');\r\n    try {\r\n      inferenceProcess.kill('SIGKILL'); // Use SIGKILL to forcefully terminate the process\r\n      inferenceProcess.stdout.removeAllListeners('data');\r\n      inferenceProcess.stderr.removeAllListeners('data');\r\n      inferenceProcess = null;\r\n      console.log('Inference process terminated.');\r\n    } catch (error) {\r\n      console.error('Failed to terminate inference process:', error);\r\n    }\r\n  } else {\r\n    console.log('No inference process to terminate.');\r\n  }\r\n\r\n  mainWindow.webContents.send('aiComplete');\r\n  inferenceProcess = null;\r\n}\r\n\r\nconst createWindow = async () => {\r\n  mainWindow = new BrowserWindow({\r\n    minWidth: 480,\r\n    minHeight: 695,\r\n    maximizable: true,\r\n    useContentSize: true,\r\n    autoHideMenuBar: true,\r\n    webPreferences: {\r\n      nodeIntegration: false,\r\n      contextIsolation: true,\r\n      sandbox: true,\r\n      preload: path.join(__dirname, \"preload.js\"),\r\n    },\r\n    icon: __dirname + \"/img/taskbar.png\",\r\n  });\r\n\r\n  const expressApp = express();\r\n\r\n  let astroDistPath;\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    astroDistPath = \"astroDist\";\r\n  } else {\r\n    astroDistPath = path.join(process.resourcesPath, \"astroDist\");\r\n  }\r\n\r\n  expressApp.use(express.static(astroDistPath));\r\n  expressApp.listen(8080, () => {\r\n    console.log(\"Express server listening on port 8080\");\r\n  });\r\n\r\n  initApplicationMenu(mainWindow);\r\n\r\n  mainWindow.loadURL(\"http://localhost:8080/index.html\");\r\n\r\n  mainWindow.webContents.setWindowOpenHandler(() => {\r\n    return { action: \"deny\" };\r\n  });\r\n\r\n  tray = new Tray(path.join(__dirname, \"img\", \"tray.png\"));\r\n  const contextMenu = Menu.buildFromTemplate([\r\n    {\r\n      label: \"Show App\",\r\n      click: function () {\r\n        mainWindow?.show();\r\n      },\r\n    },\r\n    {\r\n      label: \"Quit\",\r\n      click: function () {\r\n        tray = null;\r\n        app.quit();\r\n      },\r\n    },\r\n  ]);\r\n\r\n  tray.setToolTip(\"Electron BitNet\");\r\n\r\n  tray.on(\"right-click\", (event, bounds) => {\r\n    tray?.popUpContextMenu(contextMenu);\r\n  });\r\n\r\n  const safeDomains = [\r\n    \"https://github.com\",\r\n    \"https://react.dev/\",\r\n    \"https://astro.build/\",\r\n    \"https://www.electronjs.org/\"\r\n  ];\r\n\r\n  ipcMain.on(\"openURL\", (event, arg) => {\r\n    try {\r\n      const parsedUrl = new url.URL(arg);\r\n      const domain = parsedUrl.hostname;\r\n\r\n      const isSafeDomain = safeDomains.some((safeDomain) => {\r\n        const safeDomainHostname = new url.URL(safeDomain).hostname;\r\n        return safeDomainHostname === domain;\r\n      });\r\n\r\n      if (isSafeDomain) {\r\n        shell.openExternal(arg);\r\n      } else {\r\n        console.error(`Rejected opening URL with unsafe domain: ${domain}`);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Failed to open URL: ${err.message}`);\r\n    }\r\n  });\r\n\r\n  ipcMain.on(\"runInference\", (event, arg) => {\r\n    runInference(arg);\r\n  });\r\n\r\n  ipcMain.on(\"stopInference\", (event) => {\r\n    signalHandler();\r\n  });\r\n\r\n  tray.on(\"click\", () => {\r\n    mainWindow?.setAlwaysOnTop(true);\r\n    mainWindow?.show();\r\n    mainWindow?.focus();\r\n    mainWindow?.setAlwaysOnTop(false);\r\n  });\r\n\r\n  tray.on(\"balloon-click\", () => {\r\n    mainWindow?.setAlwaysOnTop(true);\r\n    mainWindow?.show();\r\n    mainWindow?.focus();\r\n    mainWindow?.setAlwaysOnTop(false);\r\n  });\r\n};\r\n\r\nconst currentOS = os.platform();\r\nif (currentOS === \"win32\" || currentOS === \"linux\") {\r\n  // windows + linux setup phase\r\n  const gotTheLock = app.requestSingleInstanceLock();\r\n\r\n  if (!gotTheLock) {\r\n    app.quit();\r\n  }\r\n\r\n  app.whenReady().then(() => {\r\n    createWindow();\r\n  });\r\n} else {\r\n  app.whenReady().then(() => {\r\n    createWindow();\r\n  });\r\n\r\n  app.on(\"window-all-closed\", () => {\r\n    if (process.platform !== \"darwin\") {\r\n      app.quit();\r\n    }\r\n  });\r\n\r\n  app.on(\"activate\", () => {\r\n    if (mainWindow === null) {\r\n      createWindow();\r\n    }\r\n  });\r\n}","import {app, Menu} from 'electron';\r\n\r\n/**\r\n * For configuring the electron window menu\r\n */\r\nexport function initApplicationMenu(mainWindow) {\r\n    const template = [\r\n      {\r\n        label: 'View',\r\n        submenu: [\r\n          {\r\n            label: 'Send to tray',\r\n            click() {\r\n              mainWindow.minimize();\r\n            }\r\n          },\r\n          { label: 'Reload', role: 'reload' },\r\n          { label: 'Dev tools', role: 'toggleDevTools' }\r\n        ]\r\n      }\r\n    ];\r\n    const menu = Menu.buildFromTemplate(template);\r\n    Menu.setApplicationMenu(menu);\r\n}\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","require","mainWindow","tray","inferenceProcess","createWindow","async","BrowserWindow","minWidth","minHeight","maximizable","useContentSize","autoHideMenuBar","webPreferences","nodeIntegration","contextIsolation","sandbox","preload","__dirname","icon","expressApp","astroDistPath","use","listen","console","log","template","label","submenu","click","minimize","role","menu","Menu","buildFromTemplate","setApplicationMenu","initApplicationMenu","loadURL","webContents","setWindowOpenHandler","action","Tray","contextMenu","show","app","quit","setToolTip","on","event","bounds","popUpContextMenu","safeDomains","ipcMain","arg","domain","hostname","some","safeDomain","shell","openExternal","error","err","message","args","mainPath","command","model","n_predict","threads","prompt","ctx_size","temperature","spawn","slice","stdout","data","chars","toString","send","code","runInference","kill","removeAllListeners","stderr","signalHandler","setAlwaysOnTop","focus","currentOS","requestSingleInstanceLock","whenReady","then"],"sourceRoot":""}
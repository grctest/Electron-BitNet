{"version":3,"file":"background.js","mappings":";;;;;;;;;;;;;;;;AAAmC;AACnC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,YAAY,iCAAiC;AAC7C,YAAY;AACZ;AACA;AACA;AACA,iBAAiB,0CAAI;AACrB,IAAI,0CAAI;AACR;;;;;;;;;;;ACvBA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNsC;AACd;AACJ;AACU;AACV;AACE;AACQ;AAC9B;AACkF;AAClF;AAC+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gDAAS,CAAC,yCAAG;AAC9B;AACA,OAAO,oDAAa;AACpB;AACA;AACA;AACA;AACA,QAAQ,SAAS;AACjB;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oDAAK,iCAAiC,aAAa;AACxE;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gDAAS,CAAC,yCAAG;AAC/B;AACA,OAAO,oDAAa;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,UAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oDAAK,iCAAiC,aAAa;AACxE;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAS,CAAC,yCAAG;AACpC;AACA,OAAO,oDAAa;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,eAAe;AACvB,mBAAmB,WAAW;AAC9B,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAK,iCAAiC,aAAa;AACzE;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mDAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAS;AACxB,KAAK;AACL;AACA,GAAG;AACH;AACA,qBAAqB,8CAAO;AAC5B;AACA;AACA,MAAM,IAAsC;AAC5C;AACA,IAAI,KAAK,EAEN;AACH;AACA,iBAAiB,wDAAc;AAC/B;AACA;AACA,GAAG;AACH;AACA,EAAE,4EAAmB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb,GAAG;AACH;AACA,aAAa,0CAAI,CAAC,gDAAS;AAC3B,sBAAsB,0CAAI;AAC1B;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,QAAQ,yCAAG;AACX,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,6CAAO;AACT;AACA,4BAA4B,gDAAO;AACnC;AACA;AACA;AACA,uCAAuC,gDAAO;AAC9C;AACA,OAAO;AACP;AACA;AACA,QAAQ,2CAAK;AACb,QAAQ;AACR,kEAAkE,OAAO;AACzE;AACA,MAAM;AACN,2CAA2C,YAAY;AACvD;AACA,GAAG;AACH;AACA,EAAE,6CAAO;AACT;AACA,GAAG;AACH;AACA,EAAE,6CAAO;AACT;AACA,GAAG;AACH;AACA,EAAE,6CAAO;AACT,yBAAyB,4CAAM;AAC/B;AACA,oBAAoB,0CAA0C;AAC9D,KAAK;AACL;AACA,GAAG;AACH;AACA,EAAE,6CAAO;AACT,WAAW,8CAAO;AAClB,GAAG;AACH;AACA,EAAE,6CAAO;AACT;AACA,GAAG;AACH;AACA,EAAE,6CAAO;AACT;AACA,GAAG;AACH;AACA,EAAE,6CAAO;AACT;AACA,GAAG;AACH;AACA,EAAE,6CAAO;AACT;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,kBAAkB,kDAAW;AAC7B;AACA;AACA,qBAAqB,yCAAG;AACxB;AACA;AACA,IAAI,yCAAG;AACP;AACA;AACA,EAAE,yCAAG;AACL;AACA,GAAG;AACH,EAAE;AACF,EAAE,yCAAG;AACL;AACA,GAAG;AACH;AACA,EAAE,yCAAG;AACL;AACA;AACA,GAAG;AACH;AACA,EAAE,yCAAG;AACL;AACA;AACA,GAAG;AACH;AACA,EAAE,yCAAG;AACL,QAAQ,yDAAgB;AACxB,MAAM,yCAAG;AACT;AACA,GAAG;AACH;AACA,EAAE,yCAAG;AACL;AACA;AACA;AACA,GAAG;AACH,C","sources":["webpack://electron-bitnet/./src/lib/applicationMenu.js","webpack://electron-bitnet/external commonjs \"electron\"","webpack://electron-bitnet/external commonjs \"express\"","webpack://electron-bitnet/external node-commonjs \"child_process\"","webpack://electron-bitnet/external node-commonjs \"fs\"","webpack://electron-bitnet/external node-commonjs \"os\"","webpack://electron-bitnet/external node-commonjs \"path\"","webpack://electron-bitnet/external node-commonjs \"process\"","webpack://electron-bitnet/external node-commonjs \"url\"","webpack://electron-bitnet/webpack/bootstrap","webpack://electron-bitnet/webpack/runtime/compat get default export","webpack://electron-bitnet/webpack/runtime/define property getters","webpack://electron-bitnet/webpack/runtime/hasOwnProperty shorthand","webpack://electron-bitnet/webpack/runtime/make namespace object","webpack://electron-bitnet/./src/background.js"],"sourcesContent":["import {app, Menu} from 'electron';\r\n\r\n/**\r\n * For configuring the electron window menu\r\n */\r\nexport function initApplicationMenu(mainWindow) {\r\n    const template = [\r\n      {\r\n        label: 'View',\r\n        submenu: [\r\n          {\r\n            label: 'Send to tray',\r\n            click() {\r\n              mainWindow.minimize();\r\n            }\r\n          },\r\n          { label: 'Reload', role: 'reload' },\r\n          { label: 'Dev tools', role: 'toggleDevTools' }\r\n        ]\r\n      }\r\n    ];\r\n    const menu = Menu.buildFromTemplate(template);\r\n    Menu.setApplicationMenu(menu);\r\n}\r\n","module.exports = require(\"electron\");","module.exports = require(\"express\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"process\");","module.exports = require(\"url\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { spawn } from 'child_process';\r\nimport path from 'path';\r\nimport os from 'os';\r\nimport process from 'process';\r\nimport fs from 'fs';\r\nimport url from \"url\";\r\nimport express from \"express\";\r\n\r\nimport { app, BrowserWindow, Menu, Tray, ipcMain, shell, dialog } from \"electron\";\r\n\r\nimport { initApplicationMenu } from \"./lib/applicationMenu.js\";\r\n\r\nlet mainWindow = null;\r\nlet tray = null;\r\nlet inferenceProcess = null;\r\nlet benchmarkProcess = null;\r\nlet perplexityProcess = null;\r\n\r\nfunction runInference(args) {\r\n  let mainPath = path.join(app.getAppPath(), 'bin', 'Release', 'llama-cli.exe');\r\n\r\n  if (!fs.existsSync(mainPath)) {\r\n    return;\r\n  }\r\n\r\n  const command = [\r\n    `\"${mainPath}\"`,\r\n    '-m', args.model,\r\n    '-n', args.n_predict,\r\n    '-t', args.threads,\r\n    '-p', `\"${args.prompt}\"`,\r\n    '-ngl', '0',\r\n    '-c', args.ctx_size,\r\n    '--temp', args.temperature,\r\n    '-b', '1'\r\n  ];\r\n\r\n  inferenceProcess = spawn(command[0], command.slice(1), { shell: true });\r\n\r\n  inferenceProcess.stdout.on('data', (data) => {\r\n    const chars = data.toString();\r\n    mainWindow.webContents.send('aiResponse', chars);\r\n  });\r\n\r\n  inferenceProcess.on('close', (code) => {\r\n    mainWindow.webContents.send('aiComplete');\r\n    inferenceProcess = null;\r\n  });\r\n}\r\n\r\nfunction terminateInference() {\r\n  if (inferenceProcess) {\r\n    console.log('Terminating inference process...');\r\n    try {\r\n      inferenceProcess.kill('SIGKILL'); // Use SIGKILL to forcefully terminate the process\r\n      inferenceProcess.stdout.removeAllListeners('data');\r\n      inferenceProcess.stderr.removeAllListeners('data');\r\n      inferenceProcess = null;\r\n      console.log('Inference process terminated.');\r\n    } catch (error) {\r\n      console.error('Failed to terminate inference process:', error);\r\n    }\r\n  } else {\r\n    console.log('No inference process to terminate.');\r\n  }\r\n\r\n  mainWindow.webContents.send('aiComplete');\r\n  inferenceProcess = null;\r\n}\r\n\r\nfunction runBenchmark(args) {\r\n  let benchPath = path.join(app.getAppPath(), 'bin', 'Release', 'llama-bench.exe');\r\n\r\n  if (!fs.existsSync(benchPath)) {\r\n    console.error('Benchmark binary not found, please build first.');\r\n    return;\r\n  }\r\n\r\n  const command = [\r\n    `\"${benchPath}\"`,\r\n    '-m', args.model,\r\n    '-n', args.n_token,\r\n    '-ngl', '0',\r\n    '-b', '1',\r\n    '-t', args.threads,\r\n    '-p', args.n_prompt,\r\n    '-r', '5'\r\n  ];\r\n\r\n  benchmarkProcess = spawn(command[0], command.slice(1), { shell: true });\r\n\r\n  benchmarkProcess.stdout.on('data', (data) => {\r\n    const log = data.toString();\r\n    mainWindow.webContents.send('benchmarkLog', log);\r\n  });\r\n\r\n  benchmarkProcess.on('close', (code) => {\r\n    mainWindow.webContents.send('benchmarkComplete');\r\n    benchmarkProcess = null;\r\n  });\r\n}\r\n\r\nfunction terminateBenchmark() {\r\n  if (benchmarkProcess) {\r\n    console.log('Terminating benchmark process...');\r\n    try {\r\n      benchmarkProcess.kill('SIGKILL'); // Use SIGKILL to forcefully terminate the process\r\n      benchmarkProcess.stdout.removeAllListeners('data');\r\n      benchmarkProcess.stderr.removeAllListeners('data');\r\n      benchmarkProcess = null;\r\n      console.log('Benchmark process terminated.');\r\n    } catch (error) {\r\n      console.error('Failed to terminate benchmark process:', error);\r\n    }\r\n  } else {\r\n    console.log('No benchmark process to terminate.');\r\n  }\r\n\r\n  mainWindow.webContents.send('benchmarkComplete');\r\n  benchmarkProcess = null;\r\n}\r\n\r\nfunction runPerplexity(args) {\r\n  let perplexityPath = path.join(app.getAppPath(), 'bin', 'Release', 'llama-perplexity.exe');\r\n\r\n  if (!fs.existsSync(perplexityPath)) {\r\n    console.error('Perplexity binary not found, please build first.');\r\n    return;\r\n  }\r\n\r\n  const command = [\r\n    `\"${perplexityPath}\"`,\r\n    '--model', `\"${args.model}\"`,\r\n    '--prompt', `\"${args.prompt}\"`,\r\n    '--threads', args.threads,\r\n    '--ctx-size', args.ctx_size,\r\n    '--perplexity',\r\n    '--ppl-stride', args.ppl_stride\r\n  ];\r\n\r\n  perplexityProcess = spawn(command[0], command.slice(1), { shell: true });\r\n\r\n  perplexityProcess.stderr.on('data', (data) => {\r\n    const log = data.toString();\r\n    mainWindow.webContents.send('perplexityLog', log);\r\n  });\r\n\r\n  perplexityProcess.on('error', (error) => {\r\n    console.error('Perplexity process error:', error);\r\n  });\r\n\r\n  perplexityProcess.on('close', (code) => {\r\n    mainWindow.webContents.send('perplexityComplete');\r\n    perplexityProcess = null;\r\n  });\r\n}\r\n\r\nfunction terminatePerplexity() {\r\n  if (perplexityProcess) {\r\n    console.log('Terminating perplexity process...');\r\n    try {\r\n      perplexityProcess.kill('SIGKILL'); // Use SIGKILL to forcefully terminate the process\r\n      perplexityProcess.stdout.removeAllListeners('data');\r\n      perplexityProcess.stderr.removeAllListeners('data');\r\n      perplexityProcess = null;\r\n      console.log('Perplexity process terminated.');\r\n    } catch (error) {\r\n      console.error('Failed to terminate perplexity process:', error);\r\n    }\r\n  } else {\r\n    console.log('No perplexity process to terminate.');\r\n  }\r\n\r\n  mainWindow.webContents.send('perplexityComplete');\r\n  perplexityProcess = null;\r\n}\r\n\r\nconst createWindow = async () => {\r\n  mainWindow = new BrowserWindow({\r\n    minWidth: 480,\r\n    minHeight: 695,\r\n    maximizable: true,\r\n    useContentSize: true,\r\n    autoHideMenuBar: true,\r\n    webPreferences: {\r\n      nodeIntegration: false,\r\n      contextIsolation: true,\r\n      sandbox: true,\r\n      preload: path.join(__dirname, \"preload.js\"),\r\n    },\r\n    icon: __dirname + \"/img/taskbar.png\",\r\n  });\r\n\r\n  const expressApp = express();\r\n\r\n  let astroDistPath;\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    astroDistPath = \"astroDist\";\r\n  } else {\r\n    astroDistPath = path.join(process.resourcesPath, \"astroDist\");\r\n  }\r\n\r\n  expressApp.use(express.static(astroDistPath));\r\n  expressApp.listen(8080, () => {\r\n    console.log(\"Express server listening on port 8080\");\r\n  });\r\n\r\n  initApplicationMenu(mainWindow);\r\n\r\n  mainWindow.loadURL(\"http://localhost:8080/index.html\");\r\n\r\n  mainWindow.webContents.setWindowOpenHandler(() => {\r\n    return { action: \"deny\" };\r\n  });\r\n\r\n  tray = new Tray(path.join(__dirname, \"img\", \"tray.png\"));\r\n  const contextMenu = Menu.buildFromTemplate([\r\n    {\r\n      label: \"Show App\",\r\n      click: function () {\r\n        mainWindow?.show();\r\n      },\r\n    },\r\n    {\r\n      label: \"Quit\",\r\n      click: function () {\r\n        tray = null;\r\n        app.quit();\r\n      },\r\n    },\r\n  ]);\r\n\r\n  tray.setToolTip(\"Electron BitNet\");\r\n\r\n  tray.on(\"right-click\", (event, bounds) => {\r\n    tray?.popUpContextMenu(contextMenu);\r\n  });\r\n\r\n  const safeDomains = [\r\n    \"https://github.com\",\r\n    \"https://react.dev/\",\r\n    \"https://astro.build/\",\r\n    \"https://www.electronjs.org/\"\r\n  ];\r\n\r\n  ipcMain.on(\"openURL\", (event, arg) => {\r\n    try {\r\n      const parsedUrl = new url.URL(arg);\r\n      const domain = parsedUrl.hostname;\r\n\r\n      const isSafeDomain = safeDomains.some((safeDomain) => {\r\n        const safeDomainHostname = new url.URL(safeDomain).hostname;\r\n        return safeDomainHostname === domain;\r\n      });\r\n\r\n      if (isSafeDomain) {\r\n        shell.openExternal(arg);\r\n      } else {\r\n        console.error(`Rejected opening URL with unsafe domain: ${domain}`);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Failed to open URL: ${err.message}`);\r\n    }\r\n  });\r\n\r\n  ipcMain.on(\"runInference\", (event, arg) => {\r\n    runInference(arg);\r\n  });\r\n\r\n  ipcMain.on(\"stopInference\", (event) => {\r\n    terminateInference();\r\n  });\r\n\r\n  ipcMain.handle('openFileDialog', async () => {\r\n    const result = await dialog.showOpenDialog({\r\n        properties: ['openFile'],\r\n        filters: [{ name: 'GGUF Files', extensions: ['gguf'] }]\r\n    });\r\n    return result.filePaths;\r\n  });\r\n\r\n  ipcMain.handle('getMaxThreads', async () => {\r\n    return os.cpus().length;\r\n  });\r\n\r\n  ipcMain.on(\"runBenchmark\", (event, arg) => {\r\n    runBenchmark(arg);\r\n  });\r\n\r\n  ipcMain.on(\"stopBenchmark\", (event) => {\r\n    terminateBenchmark();\r\n  });\r\n\r\n  ipcMain.on(\"runPerplexity\", (event, arg) => {\r\n    runPerplexity(arg);\r\n  });\r\n  \r\n  ipcMain.on(\"stopPerplexity\", (event) => {\r\n    terminatePerplexity();\r\n  });\r\n\r\n  tray.on(\"click\", () => {\r\n    mainWindow?.setAlwaysOnTop(true);\r\n    mainWindow?.show();\r\n    mainWindow?.focus();\r\n    mainWindow?.setAlwaysOnTop(false);\r\n  });\r\n\r\n  tray.on(\"balloon-click\", () => {\r\n    mainWindow?.setAlwaysOnTop(true);\r\n    mainWindow?.show();\r\n    mainWindow?.focus();\r\n    mainWindow?.setAlwaysOnTop(false);\r\n  });\r\n};\r\n\r\nconst currentOS = os.platform();\r\nif (currentOS === \"win32\" || currentOS === \"linux\") {\r\n  // windows + linux setup phase\r\n  const gotTheLock = app.requestSingleInstanceLock();\r\n\r\n  if (!gotTheLock) {\r\n    app.quit();\r\n  }\r\n\r\n  app.whenReady().then(() => {\r\n    createWindow();\r\n  });\r\n} else {\r\n  app.whenReady().then(() => {\r\n    createWindow();\r\n  });\r\n\r\n  app.on('before-quit', (event) => {\r\n    terminateInference();\r\n    terminateBenchmark();\r\n  });\r\n  \r\n  app.on('will-quit', (event) => {\r\n    terminateInference();\r\n    terminateBenchmark();\r\n  });\r\n\r\n  app.on(\"window-all-closed\", () => {\r\n    if (process.platform !== \"darwin\") {\r\n      app.quit();\r\n    }\r\n  });\r\n\r\n  app.on(\"activate\", () => {\r\n    if (mainWindow === null) {\r\n      createWindow();\r\n    }\r\n  });\r\n}"],"names":[],"sourceRoot":""}